package scalasql.query

import scalasql._
import scalasql.utils.ScalaSqlSuite
import utest._

import java.time.LocalDate

trait GetGeneratedKeysTests extends ScalaSqlSuite {
  def description =
    "`INSERT` operations with `.getGeneratedKeys`. Not supported by Sqlite (see https://github.com/xerial/sqlite-jdbc/issues/980)"
  override def utestBeforeEach(path: Seq[String]): Unit = checker.reset()
  def tests = Tests {
    test("single") {
      test("values") - {
        checker(
          query = Buyer.insert
            .values(
              Buyer[Sc](17, "test buyer", LocalDate.parse("2023-09-09"))
            )
            .getGeneratedKeys[Int],
          sql = "INSERT INTO buyer (id, name, date_of_birth) VALUES (?, ?, ?)",
          value = Seq(17),
          docs = """
            `getGeneratedKeys` on an `insert` returns the primary key, even if it was provided
             explicitly.
          """
        )

        checker(
          query = Buyer.select.filter(_.name `=` "test buyer"),
          value = Seq(Buyer[Sc](17, "test buyer", LocalDate.parse("2023-09-09")))
        )
      }

      test("columns") - {
        checker(
          query = Buyer.insert
            .columns(
              _.name := "test buyer",
              _.dateOfBirth := LocalDate.parse("2023-09-09"),
              _.id := 4
            )
            .getGeneratedKeys[Long],
          sql = "INSERT INTO buyer (name, date_of_birth, id) VALUES (?, ?, ?)",
          value = Seq(4L),
          docs = """
            All styles of `INSERT` query support `.getGeneratedKeys`, with this example
            using `insert.columns` rather than `insert.values`. You can also retrieve
            the generated primary keys using any compatible type, here shown using `Long`
            rather than `Int`
          """
        )

        checker(
          query = Buyer.select.filter(_.name `=` "test buyer"),
          value = Seq(Buyer[Sc](4, "test buyer", LocalDate.parse("2023-09-09")))
        )
      }

      test("partial") - {
        checker(
          query = Buyer.insert
            .columns(_.name := "test buyer", _.dateOfBirth := LocalDate.parse("2023-09-09"))
            .getGeneratedKeys[Int],
          sql = "INSERT INTO buyer (name, date_of_birth) VALUES (?, ?)",
          value = Seq(4),
          docs = """
            If the primary key was not provided but was auto-generated by the database,
            `getGeneratedKeys` returns the generated value
          """
        )

        checker(
          query = Buyer.select.filter(_.name `=` "test buyer"),
          // id=4 comes from auto increment
          value = Seq(Buyer[Sc](4, "test buyer", LocalDate.parse("2023-09-09")))
        )
      }
    }

    test("batch") {

      test("partial") - {
        checker(
          query = Buyer.insert
            .batched(_.name, _.dateOfBirth)(
              ("test buyer A", LocalDate.parse("2001-04-07")),
              ("test buyer B", LocalDate.parse("2002-05-08")),
              ("test buyer C", LocalDate.parse("2003-06-09"))
            )
            .getGeneratedKeys[Int],
          sql = """
            INSERT INTO buyer (name, date_of_birth)
            VALUES (?, ?), (?, ?), (?, ?)
          """,
          value = Seq(4, 5, 6),
          docs = """
            `getGeneratedKeys` can return multiple generated primary key values for
            a batch insert statement
          """
        )

        checker(
          query = Buyer.select,
          value = Seq(
            Buyer[Sc](1, "James Bond", LocalDate.parse("2001-02-03")),
            Buyer[Sc](2, "叉烧包", LocalDate.parse("1923-11-12")),
            Buyer[Sc](3, "Li Haoyi", LocalDate.parse("1965-08-09")),
            // id=4,5,6 comes from auto increment
            Buyer[Sc](4, "test buyer A", LocalDate.parse("2001-04-07")),
            Buyer[Sc](5, "test buyer B", LocalDate.parse("2002-05-08")),
            Buyer[Sc](6, "test buyer C", LocalDate.parse("2003-06-09"))
          )
        )
      }

    }

    test("select") {

      test("simple") {
        checker(
          query = Buyer.insert
            .select(
              x => (x.name, x.dateOfBirth),
              Buyer.select.map(x => (x.name, x.dateOfBirth)).filter(_._1 <> "Li Haoyi")
            )
            .getGeneratedKeys[Int],
          sql = """
            INSERT INTO buyer (name, date_of_birth)
            SELECT buyer0.name AS res_0, buyer0.date_of_birth AS res_1
            FROM buyer buyer0
            WHERE (buyer0.name <> ?)
          """,
          value = Seq(4, 5),
          docs = """
            `getGeneratedKeys` can return multiple generated primary key values for
            an `insert` based on a `select`
          """
        )

        checker(
          query = Buyer.select,
          value = Seq(
            Buyer[Sc](1, "James Bond", LocalDate.parse("2001-02-03")),
            Buyer[Sc](2, "叉烧包", LocalDate.parse("1923-11-12")),
            Buyer[Sc](3, "Li Haoyi", LocalDate.parse("1965-08-09")),
            // id=4,5 comes from auto increment, 6 is filtered out in the select
            Buyer[Sc](4, "James Bond", LocalDate.parse("2001-02-03")),
            Buyer[Sc](5, "叉烧包", LocalDate.parse("1923-11-12"))
          )
        )
      }

    }
  }
}
